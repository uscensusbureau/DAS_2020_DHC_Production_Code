[default]
include=../default.ini


[spark]
spark.driver.maxResultSize=0g
spark.executor.memoryOverhead=16g
spark.local.dir=/mnt/tmp/
spark.eventLog.enabled=true
spark.eventLog.dir=/mnt/tmp/logs/
spark.submit.deployMode=client
spark.network.timeout=3000

[reader]
# package(s).module_name.class_name of the reader module
reader: programs.reader.table_reader.DASDecennialReader
###
### List of tables (assuming 3 but might be more)
### These tables have decennial census specific process methods
### Table class methods will likely need to be rewritten for other applications
###
tables: PersonData UnitData

main_table: PersonData
unit_table: UnitData

# table_name.class: specify object type of each table
# Geography.class: table.GeographyTable implement later.
PersonData.class: programs.reader.table.DenseHistogramTable
UnitData.class: programs.reader.table.UnitFromPersonTable
# table_name.path - location of dir of filename=======


PersonData.path: ${DAS_S3INPUTS}/1940/output_P.csv
UnitData.path: ${DAS_S3INPUTS}/1940/output_H.csv

# file format (assuming all tables will have the same file format)
# we could change this to be "table_name.format_option" if need be.
delimiter: ,
header: True
# If a header exists, this must be set to "True".
# table_name.variables - space delimited ordered list of all the variables in a table.
# Geography.variables: state county block etc will add later.
PersonData.variables: RECTYPE YEAR DATANUM SERIAL PERNUM PERWT RELATE RELATED SEX AGE RACE RACED HISPAN HISPAND CITIZEN HISTID STATEFIP COUNTY TABTRACT ENUMDIST TABBLK GEOCODE GQTYPE
UnitData.variables: RECTYPE YEAR DATANUM SERIAL HHWT STATEFIP COUNTY GQ GQTYPE GQTYPED ENUMDIST TABTRACT TABBLK GEOCODE
linkage: GEOCODE

###
### For each variable in each table the following must be included:
### variable_name.type: "str" or "int"
### variable_name.legal: comma-delimited list of legal value expressions.
###                      an expression may be a single value or a range
###                      defined by two values with a "-" between them.
###                      All ranges are assumed to be closed on both ends.
###                      ie the range 0-115 includes both 0 and 115.
###
### For each variable the following is optional:
### variable_name.e2e:  special legal value for the 2018 end to end test.
###
### Note: we do not use table_name.variable_name.attribute to define these.
###

RECTYPE.type: str
RECTYPE.legal: H,P
YEAR.type: str
YEAR.legal: 1940
DATANUM.type: str
DATANUM.legal: 02
SERIAL.type: str
SERIAL.legal: 00000001-99999999
HHWT.type: str
HHWT.legal: 0000000100
STATEFIP.type: str
STATEFIP.legal: 00-99
COUNTY.type: str
COUNTY.legal: 0000-9999
GQ.type: int
GQ.legal: 0-9
GQTYPE.type: int
GQTYPE.legal: 0-9
GQTYPED.type: int
GQTYPED.legal: 000-999
ENUMDIST.type: str
ENUMDIST.legal: 0000-9999
GEOCODE.type: str
GEOCODE.legal: 0000000000-9999999999
TABTRACT.type: int
TABTRACT.legal: 00-9999
TABBLK.type: str
TABBLK.legal: 0-9

TABBLKGR.type: int
TABBLKGR.legal: 0-9999

PERNUM.type: str
PERNUM.legal: 0000-9999

PERWT.type:  str
PERWT.legal: 0000000100

SLWT.type: str
SLWT.legal: 0000000100

RELATE.type: str
RELATE.legal: 00-99

RELATED.type: str
RELATED.legal: 0000-9999

SEX.type: str
SEX.legal: 1-2

AGE.type: int
AGE.legal: 000-120

RACE.type: str
RACE.legal: 1-6

RACED.type: str
RACED.legal: 000-999

HISPAN.type: str
HISPAN.legal: 0-4

HISPAND.type:  str
HISPAND.legal: 000-999

CITIZEN.type: str
CITIZEN.legal: 0-4

HISTID.type: str
HISTID.legal: 0-9###

### Some variables must be recoded before the disclosure engine runs.
### These recodes are very specific to the decennial census and in particular
### the 2018 test. However the module is pluggable or may be removed all together
### if no recodes are necessary. The following predisclosure recode guidelines
### are meant to ensure seemless integration of modules.
### (1) variables should not be recoded in place. ie don't overwrite old variables even if all the recode does is change a variables type from str to int so that it can be used as an array index for example.
### (2) recoder should operate on and return sql Row objects
# package.module_name.class_name for predisclosure recodes
PersonData.recoder: programs.reader.e2e_recoder.votingage_recoder
UnitData.recoder: programs.reader.e2e_recoder.gqunit_recoder
# table_name.recode_variables - list of new variable names
PersonData.recode_variables: VA RACE0 GQTYPE2
UnitData.recode_variables: GQTYPE2

VA: AGE
VA.type: int
VA.legal: 0-1

RACE0: RACE
RACE0.type: int
RACE0.legal: 0-5

GQTYPE2: GQTYPE
GQTYPE2.type: int
GQTYPE2.legal: 0-7


###
### The reader needs to know which variables to build the numpy multiarray over.
### For now the only
# rename geography -> groupby for more general use.
PersonData.geography: GEOCODE
PersonData.histogram: GQTYPE2 VA HISPAN CITIZEN RACE0

UnitData.geography: geocode
UnitData.histogram: GQTYPE2
UnitData.unique: SERIAL

[gurobi]
INCLUDE=../default.ini

[writer]
INCLUDE=../default.ini