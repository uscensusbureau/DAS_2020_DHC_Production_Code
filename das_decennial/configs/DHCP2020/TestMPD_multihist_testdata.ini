## Test DHCP on a small data set
[DEFAULT]
INCLUDE=MPD_RI.ini

[python]
[logging]
[ENVIRONMENT]
[geodict]

[setup]
spark.name: DAS_DHCH2020_TESTDATA

[reader]
Person.path: $DAS_S3INPUTS/title13_input_data/test/table13.txt
Unit.path: $DAS_S3INPUTS/title13_input_data/test/table10gowith13.txt
numReaderPartitions: 10
;validate_input_data_constraints: True
;
;
;race7: race
;race7.type: int
;race7.legal: 0-6
;
;Person.histogram:  votingage hispanic cenrace
;Person.histogram1: relgq sex age hispanic race7
;
;Person.recode_variables: cenrace race7

[engine]
#saved_noisy_app_id: application_1580837820168_0213
saved_noisy_app_id: application_1580837820168_0304
;postprocess_only: on
delete_raw: 0
save_noisy: yes
reload_noisy: yes
;check_budget: on
;spark: off


[schema]
[budget]


# start with no queries
;DPqueries: relgq, votingage * hispanic * cenrace, age * sex, relgq * sex * age * hispanic * race7lev
;queriesprop: .2, .5, .2, .1

# The fuller one
DPqueries: relgq, votingage * hispanic * cenrace, age * sex, relgq * sex * age * hispanic * race7lev, hhgq8lev * sex * ageupto100 * hispanic * cenrace, detailed
queriesprop: .2, .5, .2, .05, .05,  0


[constraints]
[gurobi]
;save_lp_path = $DAS_S3ROOT/lpfiles/$JBID/$MISSION_NAME
;save_lp_pattern = *
[writer]
# Where the data gets written:
#writer: programs.writer.mdf2020writer.DHCP_MDF2020_Writer
;writer: programs.writer.multi_writer.MultiWriter
;multiwriter_writers: BlockNodeDicts, DHCP2020_MDF
output_path: $DAS_S3ROOT/users/$JBID/DHCP2020_testdata_fullersubhist_mdf/
overwrite_flag: 1

[validator]
[assessment]
[takedown]
[experiment]
[error_metrics]
