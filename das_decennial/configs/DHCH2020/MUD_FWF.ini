[DEFAULT]
INCLUDE=MUD.ini

[python]
[logging]
dvs_enabled: False

[environment]

[geodict]
#smallest to largest (no spaces)
geolevel_names: Block,Block_Group,Tract,Tract_Group,County,State,US+PR
#(largest geocode length to smallest, put 0 for US or US+PR (i.e. above state) level)
geolevel_leng: 16,14,11,8,5,2,0
spine = opt_spine

[setup]
spark.name: DAS_CEF_UNIT_FWF_TEST

[reader]
# from MUD.ini and unit_2020.ini:
# tables: Household Unit
# main_table: Household
# unit_table: Unit
Household.class: programs.reader.cef_2020.cef_2020_dhch_reader.CEF2020DHCHHouseholdTable
Unit.class: programs.reader.cef_2020.cef_2020_dhch_reader.CEF2020DHCHUnitTable

Household.path:  $DAS_S3INPUTS/2010-convert/cef/us/unit/CEF20_UNIT_44.txt
Unit.path:  $DAS_S3INPUTS/2010-convert/cef/us/unit/CEF20_UNIT_44.txt
grfc_path: $DAS_S3ROOT/2010-convert-input/grfc/grfc_tab20_44[0-9]*.txt

Household.generated_module: programs.reader.cef_2020.cef_validator_classes
Household.generated_table: CEF20_UNIT
Household.geography: geocode

Unit.generated_module: programs.reader.cef_2020.cef_validator_classes
Unit.generated_table: CEF20_UNIT
Unit.geography: geocode

numReaderPartitions: 10000
validate_input_data_constraints: False

Household.histogram: sex hhage hisp race elderly hhtenshort hhtype_dhch

Household.recoder: programs.reader.cef_2020.cef_2020_dhch_reader.DHCH_Household_recoder
Household.recode_variables: sex hhage hisp race elderly hhtenshort hhtype_dhch

sex: hhsex
sex.type: int
sex.legal: 0-1

hhage: hhldrage
hhage.type: int
hhage.legal: 0-8

hisp: hhspan
hisp.type: int
hisp.legal: 0-1

race: hhrace
race.type: int
race.legal: 0-6

elderly: p60 p65 p75
elderly.type: int
elderly.legal: 0-3

hhtenshort: ten
hhtenshort.type: int
hhtenshort.legal: 0-1

hhtype_dhch: hht
hhtype_dhch.type: int
hhtype_dhch.legal: 0-521

Unit.histogram: tenvacgq
Unit.recoder: programs.reader.cef_2020.cef_2020_dhch_reader.DHCH_Unit_recoder
Unit.recode_variables: tenvacgq

tenvacgq: ten vacs qgqtyp
tenvacgq.type: int
tenvacgq.legal: 0-34

[engine]

[schema]
schema: DHCH_SCHEMA

[budget]
strategy: DHCH_test_strategy
query_ordering: DHCH_ordering


[constraints]
theInvariants.Block: tot, tot_hu, gqhh_vect
#theConstraints.Block: gq_vect, owned, tot_hh
#theConstraints.Block: gq_vect, owned, tot_hh, living_alone, size2, size3, size4, hh_elderly, age_child
#theInvariants.Block:
#theConstraints.Block:

[gurobi]
seq_optimization_approach =L2PlusRounder_interleaved
l2_optimization_approach = DataIndUserSpecifiedQueriesNPass
rounder_optimization_approach = MultipassRounder
DataIndNPass_toleranceType = opt_tol
#const_tol_val = 25.0
opt_tol_slack = 0.1

OptimalityTol: 1e-7
BarConvTol: 1e-7
BarQCPConvTol: 0
BarIterLimit: 1000
FeasibilityTol: 1e-6

# Gurobi prints stats to STDOUT on the CORE nodes, where it is hard to find..
# You probably don't want to do this.
print_gurobi_stats: False
heartbeat_frequency: 0
notification_frequency: 120

[writer]
# Where the data gets written:
output_path: $DAS_S3ROOT/users/$JBID/test_cef_runs/DHCH_FWF5
produce_flag: 1
writer: programs.writer.multi_writer.MultiWriter
multiwriter_writers= BlockNodeDicts, DHCH2020_MDF
# delete existing file (if one) 0 or 1
overwrite_flag: 1
classification_level: C_U_I//CENS - Title 13 protected data
s3cat_suffix: .txt

[validator]
;validator: programs.validator.end2end_validator.E2EValidatorUnit

[assessment]

[takedown]

[experiment]

[error_metrics]
#error_metrics: programs.metrics.accuracy_metrics.AccuracyMetrics

[stats]
# How often we should report on the driver the heartbeat (in seconds)
# Heartbeat is used to coordinate with the dashboard
heartbeat_frequency: 60
